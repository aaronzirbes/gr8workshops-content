!!! 5
//if IE 7
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 8
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 9
  html(lang="en", class="no-js ie9", data-ng-app="main", id="ng-app")
//if [(gt IE 9)|!(IE)] <!
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Building RESTful Services with Grails 3
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Reveal JS Template")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")

  body
    .reveal
      .slides
        section(data-state="index-slide")
          h1 Building RESTful Web Services with Grails 3
          p
          small by Jenn Strater <a href="http://twitter.com/codeJENNerator" target="_blank"><img style="border:none;margin-top:0px;box-shadow:none;" src="./assets/img/CompanyAndProductLogos/twitter.png"/>@codeJENNerator</a>
        section(data-state="github-slide", class="github-section")
          h1 <i class="fa fa-icon fa-github"></i>
          p Current
          p
            a(href="https://github.com/gr8workshops/gr8workshops-content/tree/master/newtogroovy/introtograils3",target="_blank") Slides(source)
        section
          h2 About Me
          p Professional
          ul.ul-no-style
            li.
              <img class="inline-img" src='./assets/img/opi-square-logo.png' style='vertical-align:middle;'>
              Senior Consultant - <a href="http://objectpartners.com" target="_blank" style='vertical-align:middle'>Object Partners</a>
            li.
              <img class="inline-img" src='./assets/img/gr8ladies.png' style='vertical-align:middle;'>
              Co-Founder - <a href="http://www.gr8ladies.org" target="_blank" style='vertical-align:middle'>Gr8Ladies</a>
        section
          h2 About Me
          p Experience
          img(src='./assets/img/techbooks.jpg', style="width: 60%;")
          small source: http://tjvantoll.com/2014/12/29/so-you-want-to-write-a-tech-book/
        section
          h2 About Me
          p Minneapolis, MN
          p <img src='./assets/img/minnesota.png' style="border:none;margin-top:-25px;">
          ul.ul-no-style Connect on Social Media
            li <a href="https://twitter.com/codeJENNerator" target="_blank">Twitter</a> @codeJENNerator
            li <a href="https://linkedin.com/in/jennstrater" target="_blank">LinkedIn</a> https://linkedin.com/in/jennstrater
            li <a href="https://github.com/jlstrater" target="_blank">Github</a> https://github.com/jlstrater

        section
          h2 About YOU
          ul
            li Students
            li Professional Developers
            ul
              li Java
              li .NET
              li PHP or Ruby
              li JRuby, Scala, or Clojure
              li Groovy

        section
          h2 Agenda
          ul
            li Intro to REST
            li Getting Started
            li Concepts
            ul
              li endpoints
              li response formats
              li best practices
        section
          h2 REST
          p REpresentational State Transfer
          ul
            li allow applications to talk to each other over HTTP
            li responses usually in JSON, XML, or both
            li HTTP methods GET, PUT, POST or DELETE

        section
          h2 When to use Grails
          ul
            li.fragment Quick Start-up time
            li.fragment Small, agile team and project
            li.fragment Traditional data persistence model

        section
          h2 When Not to use Grails
          ul
            li lots of legacy code in another framework
            li Complex high performant systems
            li Non-standard data persistence

        section
          section
            h2 Getting Started

          section
            pre.
              <code>grails create-app --profile=web-api --inplace</code>
        section
          h2 Domain Classes as REST Resources
          pre.
            <code>grails> create-domain-resource com.example.Book</code>
        section
          h2 Domain Classes as REST Resources
          pre.
            <code>import grails.rest.*

            @Resource(uri='/books')
              class Book {
                String title

                static constraints = {
                  title blank:false
              }
            }</code>
          p Much like scaffolding, this is great for demos but not so much for real-world production apps.
        section
          h2 Default Responses
          p *newer versions JSON, older versions default to XML*
          pre.
            <code>@Resource(uri='/books', formats=['json', 'xml'])</code>
          p Specify all the formats the resource should expose. All formats available are in Config.groovy -> grails.mime.types
        section
          h2 @RESOURCE
          p The transformation will automatically register the necessary RESTful URL mapping and create a controller called BookController.
          p Enables all of the HTTP method verbs on the resource
          p Make @Resource read only
          pre.
            <code>@Resource(uri='/books', readOnly=true)</code>
        section
          h2 Removing some of the magic
          p Specify the URL mapping in UrlMappings.groovy
          pre <code>"/books"(resources:'book')</code>
          img(src='./assets/img/slide-images/REST-routes.png')

        section
          h2 URL Mappings
          ul
            li Exclude delete and update actions
            ul
              li "/books"(resources:'book', excludes:['delete', 'update'])
            li Include only the index and show actions
            ul
              li "/books"(resources:'book', includes:['index', 'show'])
            li Single Resource - there is only 1 possible object in the database
            ul
              li "/book"(resource:'book')
        section
          h2 Nested Mappings
          p You can also nest regular URL mappings within a resource mapping
          pre.
            <code>"/books"(resources: "book") {
              "/publisher"(controller:"publisher", method:"GET")
            }</code>
          p Maps /books/1/publisher to PublisherController index method
        section
          h2 Linking from GSP to REST Resources
          pre <code><g:link resource="${book}">My Link</g:link></code>
        section
          h2 Exceptions
          p Currently g:link does not work with DELETE action and most browsers do not support sending the DELETE method directly
          p The best way to accomplish this is to use a form submit:
          pre.
            <code><form action="/book/2" method="post">
              <input type="hidden" name="_method" value="DELETE">
            </form></code>
        section
          h2 Try it!
          p Make the User domain a REST resource
          p Verify its working by going to:
          p http://localhost:8080/questionApp/users.json
        section
          h2 Versioning
          p Using the URI to version APIs
          pre.
            <code>"/books/v1"(resources:"book", namespace:'v1')
            "/books/v2"(resources:"book", namespace:'v2')</code>
          p That will match the following controllers:
          pre.
            <code>package myapp.v1

            class BookController {
              static namespace = 'v1'
            }</code>
            <code>
            package myapp.v2

            class BookController {
              static namespace = 'v2'
             }</code>
        section
          h2 Url Versioning
          p This approach has the disadvantage of requiring two different URI namespaces for your API.
          p Discouraged in favor of Hypermedia
        section
          h2 Accept Header
          pre.
            <code>"/books"(version:'1.0', resources:"book", namespace:'v1')
                   "/books"(version:'2.0', resources:"book", namespace:'v2')</code>
          p Clients pass which version they need
          pre <code>>curl -i -H "Accept-Version: 1.0" -X GET http://localhost:8080/books</code>
          p Still need 2 namespaces

        section
          h2 REST CONTROLLER SUPER CLASS
          p Going beyond @Resource
          pre.
            <code>class BookController extends RestfulController {
              static responseFormats = ['json', 'xml']

              BookController() {
                  super(Book)
              }

              @Override
              protected Book queryForResource(Serializable id) {
                 Book.where {
                      id == id && author.id = params.authorId
                 }.find()
              }
            }</code>
        section
          h2 ROLL YOUR OWN
          p Don’t have to use RestfulController
          p Create your own. For examples look at the scaffolding that is created by
          pre.
            <code>grails generate-controller</code>
          p The big win is the respond method
        section
          h2 MODIFY RESPONSE RENDER
          p Custom Renderers allow you to include/exclude properties from a domain
          p Register custom renderers in conf/spring/resources.groovy
          pre.
            <code>beans = {
              bookRenderer(XmlRenderer, Book) {
                includes = ['title']
                excludes = ['isbn']
              }
            }</code>
        section
          p Grails’ Converters have a registered ObjectMarshaller
          p Register custom marshaller in BootStrap.init
          pre.
            <code>JSON.registerObjectMarshaller(Book) {
              def map = [:]
              map['titl'] = it.title
              map['auth'] = it.author
              return map
            }</code>
        section
          p Renderers use Converters under the covers as JSON, as XML.
          p When implementing a custom renderer you could use Jackson, Gson, or any Java library
          p Converters are tied to Grails’ own marshalling implementation
        section
          h2 Try IT!
          p Modify the response for the User domain to only show the username, firstName, lastName and email
          p You can do either a renderer or marshaller

        section
          h2 Solution 1
          pre.
            <code>JSON.registerObjectMarshaller(User) {
              def map= [:]
                map['username'] = it.username
                map['firstName'] = it.firstName
                map['lastName'] = it.lastName
                map['email'] = it.email
              return map
            }</code>
        section
          h2 Solution 2
          pre.
            <code>import grails.rest.render.xml.*

            beans = {
              userRenderer(XmlRenderer, com.example.User) {
                includes = ['firstName', 'lastName', 'username', 'email']
              }
            }</code>
        section
          h2

        section
          h2 Conclusions
          ul Grails
            li makes prototyping fast and efficient
            li works well for standard web apps
            li handles REST defaults easily
        section
          h2 Next Steps
          ul
            li Spring Security
            li Documentation
            li Tests
        section
          h2 Resources
          ul
            li <a href="http://grails.org" target="_blank">grails.org</a>
            li <a href="http://stackoverflow.com/tags/grails/info target="_blank">StackOverflow</a>
        section
          h3 Questions?
          p <a href="http://twitter.com/codeJENNerator" target="_blank"><img style="border:none;margin:0px;box-shadow:none;" src="./assets/img/CompanyAndProductLogos/twitter.png"/>@codeJENNerator</a>
          p jenn@gr8ladies.org
    script(src="./assets/js/app.js")

    // If the query includes 'print-pdf', use the PDF print sheet
    script(type='text/javascript').
      if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      } else if ( window.location.search.match( /print-paper/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      }

